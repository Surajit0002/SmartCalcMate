import React, { createContext, useContext, useState } from 'react';

const supportedLanguages = [
  { code: 'en', name: 'English', flag: 'ðŸ‡ºðŸ‡¸' },
  { code: 'es', name: 'EspaÃ±ol', flag: 'ðŸ‡ªðŸ‡¸' },
  { code: 'fr', name: 'FranÃ§ais', flag: 'ðŸ‡«ðŸ‡·' },
  { code: 'zh', name: 'ä¸­æ–‡', flag: 'ðŸ‡¨ðŸ‡³' },
];

const supportedCurrencies = [
  { code: 'USD', symbol: '$', name: 'US Dollar', flag: 'ðŸ‡ºðŸ‡¸' },
  { code: 'EUR', symbol: 'â‚¬', name: 'Euro', flag: 'ðŸ‡ªðŸ‡º' },
  { code: 'GBP', symbol: 'Â£', name: 'British Pound', flag: 'ðŸ‡¬ðŸ‡§' },
  { code: 'JPY', symbol: 'Â¥', name: 'Japanese Yen', flag: 'ðŸ‡¯ðŸ‡µ' },
  { code: 'CAD', symbol: 'C$', name: 'Canadian Dollar', flag: 'ðŸ‡¨ðŸ‡¦' },
  { code: 'AUD', symbol: 'A$', name: 'Australian Dollar', flag: 'ðŸ‡¦ðŸ‡º' },
  { code: 'CHF', symbol: 'CHF', name: 'Swiss Franc', flag: 'ðŸ‡¨ðŸ‡­' },
  { code: 'CNY', symbol: 'Â¥', name: 'Chinese Yuan', flag: 'ðŸ‡¨ðŸ‡³' },
  { code: 'INR', symbol: 'â‚¹', name: 'Indian Rupee', flag: 'ðŸ‡®ðŸ‡³' },
  { code: 'BRL', symbol: 'R$', name: 'Brazilian Real', flag: 'ðŸ‡§ðŸ‡·' },
];

interface I18nContextType {
  language: string;
  setLanguage: (lang: string) => void;
  currency: string;
  setCurrency: (curr: string) => void;
  formatCurrency: (amount: number) => string;
  getCurrencySymbol: () => string;
  supportedLanguages: typeof supportedLanguages;
  supportedCurrencies: typeof supportedCurrencies;
}

const I18nContext = createContext<I18nContextType>({
  language: 'en',
  setLanguage: () => {},
  currency: 'USD',
  setCurrency: () => {},
  formatCurrency: (amount: number) => `$${amount.toLocaleString()}`,
  getCurrencySymbol: () => '$',
  supportedLanguages,
  supportedCurrencies,
});

export function I18nProvider({ children }: { children: React.ReactNode }) {
  const [language, setLanguageState] = useState('en');
  const [currency, setCurrencyState] = useState('USD');

  const setLanguage = (lang: string) => {
    setLanguageState(lang);
    document.documentElement.lang = lang;
  };

  const setCurrency = (curr: string) => {
    setCurrencyState(curr);
  };

  const formatCurrency = (amount: number): string => {
    const currencyInfo = supportedCurrencies.find(c => c.code === currency);
    if (!currencyInfo) return amount.toString();

    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency,
      minimumFractionDigits: 2,
      maximumFractionDigits: 2,
    }).format(amount);
  };

  const getCurrencySymbol = (): string => {
    const currencyInfo = supportedCurrencies.find(c => c.code === currency);
    return currencyInfo?.symbol || currency;
  };

  return (
    <I18nContext.Provider value={{
      language,
      setLanguage,
      currency,
      setCurrency,
      formatCurrency,
      getCurrencySymbol,
      supportedLanguages,
      supportedCurrencies,
    }}>
      {children}
    </I18nContext.Provider>
  );
}

export function useI18n() {
  return useContext(I18nContext);
}